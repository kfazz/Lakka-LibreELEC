#!/bin/bash

################################################################################
#      This file is part of LibreELEC - https://libreelec.tv
#      Copyright (C) 2016 Christian Hewitt (chewitt@libreelec.tv)
#
#  LibreELEC is free software: you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation, either version 2 of the License, or
#  (at your option) any later version.
#
#  LibreELEC is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with LibreELEC.  If not, see <http://www.gnu.org/licenses/>.
################################################################################

################################################################################
# variables such as $ROOT $PATH must be passed via env from scripts/image - the
# mkimage-atv script also requires 'kpartx' to be installed.
################################################################################

# set variables:
  VERBOSE="TRUE"
  IMGSIZE="1024" # size of BOOT in MB
  IMGUSB="$IMAGE_NAME-usb.img"
  IMGHDD="$IMAGE_NAME-hdd.img"

# set verbose output on/off:
  if [ "${VERBOSE}" = "TRUE" ]; then
    exec 3>&1
    exec 4>&2
  else
    exec 3> /dev/null
    exec 4> /dev/null
  fi

# check for kpartx
  KPARTX=$(which kpartx)
  if [ -z "$KPARTX" ]; then
    echo "kpartx was not found, exiting!"
    exit 1
  fi

# loop through image options
  for IMAGE in $IMGUSB $IMGHDD; do

    # set the installer function
    IMGFILE="$IMAGE"
    if [ "$IMGFILE" = "$IMGUSB" ]; then
      FUNCTION="install-usb"
    else
      FUNCTION="install-hdd"
    fi

    # create USB image
    echo "Creating $IMGFILE"
    dd if=/dev/zero of=$IMGFILE bs=1M count=$IMGSIZE 1>&3 2>&4
    parted -s $IMGFILE mklabel gpt 1>&3 2>&4
    parted -s $IMGFILE mkpart primary HFS 40s 100% 1>&3 2>&4
    parted -s $IMGFILE name 1 LIBREELEC 1>&3 2>&4
    parted -s $IMGFILE set 1 atvrecv on 1>&3 2>&4
    kpartx -asv $IMGFILE 1>&3 2>&4
    LDEV=$(losetup -a | grep $IMGFILE | awk '{print $1}' | sed 's/://g')
    MDEV=$(echo $LDEV | sed 's|loop|mapper/loop|g')
    mkfs.hfsplus -s -v LIBREELEC ${MDEV}p1 1>&3 2>&4
    fsck.hfsplus -f ${MDEV}p1 1>&3 2>&4

    # mount the image file
    LE_TMP=$(mktemp -d)
    mount ${MDEV}p1 $LE_TMP 1>&3 2>&4

    # copy recovery files
    cp -Rv $BUILD/atvboot-*/* $LE_TMP 1>&3 2>&4
    echo $FUNCTION > $LE_TMP/function

    # copy MACH_KERNEL/SYSTEM/.md5 files
    cp $RELEASE_DIR/target/* $LE_TMP

    # unmount the image file
    sync 1>&3 2>&4
    sleep 2
    umount $LE_TMP 1>&3 2>&4
    sleep 2
    rm -rf $LE_TMP 1>&3 2>&4

    # sync everything up
    echo y | gptsync $LDEV 1>&3 2>&4
    sleep 2
    kpartx -dv $IMGFILE 1>&3 2>&4
    sleep 2
    sync 1>&3 2>&4

    # gzip the image file and move to target/
    echo "Creating $IMGFILE.gz"
    gzip $IMGFILE
    IMGFILE="$IMGFILE.gz"

    # change file owner to match target/
    USR=$(ls -dl $ROOT/target | awk '{print $3}')
    GRP=$(ls -dl $ROOT/target | awk '{print $4}')
    chown $USR:$GRP $IMGFILE

    # move to target/
    mv $IMGFILE target/

# close the loop
done
